# -*- coding: utf-8 -*-
"""Homework_6_Question_OOP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e9-HbHBbLX30AHqM9EY8TKc345MSmniK

# **Homework 6: Object-oriented programming (OOP)**

### **Due date:** October 27, at 2:30 PM.

### **Submission:** Please push your homework to the our GitHub repository, and place it in the 'Homework 6' folder.

---



---

## **Question**

### 1. Design a class hierarchy to represent different types of vehicles in a transportation system. Start with a base class called Vehicle with the following attributes and methods:

**Attributes:**

- make (string)
- model (string)
- year (integer)
- fuel (float)

**Methods:**

- __init__(self, make, model, year, fuel): Initialize the attributes.
- info(self): Print basic information about the vehicle, including make, model, year, and fuel efficiency.

Next, create two subclasses that inherit from Vehicle:

### 2. Create a subclass called Car with the following additional attributes and methods:

**Attributes:**

- num_doors (integer)
- is_sedan (boolean)


**Methods:**

- __init__(self, make, model, year, fuel, num_doors, is_sedan): Initialize the attributes.
- display_car_info(self): Print detailed information about the car, including the number of doors and whether it's a sedan.


### 3. Create a subclass called Motorcycle with the following additional attributes and methods:

**Attributes:**

- top_speed (integer)
- engine_size (float)


**Methods:**

- __init__(self, make, model, year, fuel, top_speed, engine_size): Initialize the attributes.
- display_motorcycle_info(self): Print detailed information about the motorcycle, including top speed and engine size.


Finally, create instances of both Car and Motorcycle classes and demonstrate the use of their methods to display information about each vehicle.
"""

class Vehicle:
    def __init__(self, make, model, year, fuel):
        self.make = make
        self.model = model
        self.year = year
        self.fuel = fuel

    def info(self):
        print(f"Make: {self.make}")
        print(f"Model: {self.model}")
        print(f"Year: {self.year}")
        print(f"Fuel Efficiency: {self.fuel} mpg")


class Car(Vehicle):
    def __init__(self, make, model, year, fuel, num_doors):
        super().__init__(make, model, year, fuel)
        self.num_doors = num_doors

    def info(self):
        super().info()
        print(f"Number of Doors: {self.num_doors}")


class Sports car(Vehicle):
    def __init__(self, make, model, year, fuel, payload_capacity):
        super().__init__(make, model, year, fuel)
        self.payload_capacity = payload_capacity

    def info(self):
        super().info()
        print(f"Payload Capacity: {self.payload_capacity} lbs")


# Example usage:
car = Car("Toyota", "Camry", 2022, 30.5, 4)
car.info()

print("\n")

truck = Truck("Ford", "F-150", 2019, 12, 2000)
truck.info()

class Vehicle:
    def __init__(self, make, model, year, fuel):
        self.make = make
        self.model = model
        self.year = year
        self.fuel = fuel

    def info(self):
        print(f"Make: {self.make}")
        print(f"Model: {self.model}")
        print(f"Year: {self.year}")
        print(f"Fuel Efficiency: {self.fuel} mpg")


class Car(Vehicle):
    def __init__(self, make, model, year, fuel, num_doors, is_sedan):
        super().__init__(make, model, year, fuel)
        self.num_doors = num_doors
        self.is_sedan = is_sedan

    def display_car_info(self):
        super().info()
        print(f"Number of Doors: {self.num_doors}")
        print(f"Is Sedan: {'Yes' if self.is_sedan else 'No'}")


car = Car("Lexus", "ES350", 2017, 21, 4, True)
car.display_car_info()

class Vehicle:
    def __init__(self, make, model, year, fuel):
        self.make = make
        self.model = model
        self.year = year
        self.fuel = fuel

    def info(self):
        print(f"Make: {self.make}")
        print(f"Model: {self.model}")
        print(f"Year: {self.year}")
        print(f"Fuel Efficiency: {self.fuel} mpg")


class Car(Vehicle):
    def __init__(self, make, model, year, fuel, num_doors, is_sedan):
        super().__init__(make, model, year, fuel)
        self.num_doors = num_doors
        self.is_sedan = is_sedan

    def display_car_info(self):
        super().info()
        print(f"Number of Doors: {self.num_doors}")
        print(f"Is Sedan: {'Yes' if self.is_sedan else 'No'}")


class Motorcycle(Vehicle):
    def __init__(self, make, model, year, fuel, top_speed, engine_size):
        super().__init__(make, model, year, fuel)
        self.top_speed = top_speed
        self.engine_size = engine_size

    def display_motorcycle_info(self):
        super().info()
        print(f"Top Speed: {self.top_speed} mph")
        print(f"Engine Size: {self.engine_size} cc")


# Example usage:
car = Car("Toyota", "Camry", 2022, 30.5, 4, True)
car.display_car_info()


motorcycle = Motorcycle("Harley", "roadster", 1999, 12, 200, 95)
motorcycle.display_motorcycle_info()
# -*- coding: utf-8 -*-
"""Homework6-Burgett.Shelbi1001318717.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qZH3y5RFve3vdNVx41fMvtXziPxSPW7R

1. Design a class hierarchy to represent different types of vehicles in a transportation system. Start with a base class called Vehicle with the following attributes and methods:

Attributes:

    make (string)
    model (string)
    year (integer)
    fuel (float)

Methods:

    init(self, make, model, year, fuel): Initialize the attributes.
    info(self): Print basic information about the vehicle, including make, model, year, and fuel efficiency.

Next, create two subclasses that inherit from Vehicle:
"""

class Vehicle:
  def __init__(self, make, model, year, fuel):
    self.make=make
    self.model=model
    self.year=year
    self.fuel=fuel
  def info(self):
    print(f"Make: {self.make}\nModel: {self.model}\nYear: {self.year}\nFuel: {self.fuel}")

"""2. Create a subclass called Car with the following additional attributes and methods:

Attributes:

    num_doors (integer)
    is_sedan (boolean)

Methods:

    init(self, make, model, year, fuel, num_doors, is_sedan): Initialize the attributes.
    display_car_info(self): Print detailed information about the car, including the number of doors and whether it's a sedan.

"""

class Vehicle:
  def __init__(self, make, model, year, fuel):
    self.make=make
    self.model=model
    self.year=year
    self.fuel=fuel
  def info(self):
    print(f"Make: {self.make}\nModel: {self.model}\nYear: {self.year}\nFuel: {self.fuel}")
class Car(Vehicle):
  def __init__(self, make, model, year, fuel, num_doors, is_sedan):
    super().__init__(make, model, year, fuel)
    self.num_doors=num_doors
    self.is_sedan=is_sedan
  def info(self):
    super().info()
    print(f"Number of Doors: {self.num_doors}\nSedan: {is_sedan}")

"""3. Create a subclass called Motorcycle with the following additional attributes and methods:

Attributes:

    top_speed (integer)
    engine_size (float)

Methods:

    init(self, make, model, year, fuel, top_speed, engine_size): Initialize the attributes.
    display_motorcycle_info(self): Print detailed information about the motorcycle, including top speed and engine size.

Finally, create instances of both Car and Motorcycle classes and demonstrate the use of their methods to display information about each vehicle.
"""

class Vehicle:
  def __init__(self, make, model, year, fuel):
    self.make=make
    self.model=model
    self.year=year
    self.fuel=fuel
  def info(self):
    print(f"Make: {self.make}\nModel: {self.model}\nYear: {self.year}\nFuel: {self.fuel}")
class Car(Vehicle):
  def __init__(self, make, model, year, fuel, num_doors, sedan):
    super().__init__(make, model, year, fuel)
    self.num_doors = num_doors
    self.sedan=sedan
  def info(self):
    super().info()
    print(f"Number of Doors: {self.num_doors}")
class Motorcycle(Vehicle):
  def __init__(self, make, model, year, fuel, t_speed, engine):
    super().__init__(make, model, year, fuel)
    self.t_speed=t_speed
    self.engine=engine


  def info(self):
    super().info()



if __name__ =="__main__":
  car= Car("Ford","Mustang",1967,30, 2, "Not a sedan")
  motorcycle= Motorcycle("Harley-Davidson","Heritage Softail", 1984, 39, 120, 1746)


print("Car:")
car.info()

print("\nMotorcycle:")
motorcycle.info()

